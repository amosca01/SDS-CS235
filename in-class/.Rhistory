south_africa %>%
ggplot(aes(year, life_expectancy)) +
geom_line()
south_africa %>%
ggplot(aes(x = year, y = life_expectancy)) +
geom_line()
south_africa %>%
ggplot(aes(x = year, y = life_expectancy)) +
geom_point()
south_africa <- read.zoo(south_africa)
View(south_africa)
south_africa <- read.zoo(south_africa %>%
select(year, life_expectancy))
south_africa <- read.zoo(south_africa %>%
select("year", "life_expectancy"))
south_africa <-
gm_life_expectancy %>%
dplyr::filter(country == "South Africa") %>%
pivot_longer(cols = !country, names_to = "year", values_to = "life_expectancy") %>%
select("year", "life_expectancy")
View(south_africa)
south_africa <- read.zoo(south_africa)
south_africa$year <- as.Date(south_africa$year)
south_africa$year <- as.Numeric(south_africa$year)
south_africa$year <- as.numeric(south_africa$year)
south_africa$year <- as.Date(south_africa$year)
south_africa <- read.zoo(south_africa)
south_africa %>%
ggplot(aes(x = year, y = life_expectancy)) +
geom_point()
south_africa %>%
ggplot(aes(x = year, y = life_expectancy)) +
geom_line()
south_africa$year <- as.Date(south_africa$year, format="%Y")
south_africa <-
gm_life_expectancy %>%
dplyr::filter(country == "South Africa") %>%
pivot_longer(cols = !country, names_to = "year", values_to = "life_expectancy") %>%
select("year", "life_expectancy")
south_africa$year <- as.Date(south_africa$year, format="%Y")
south_africa <- read.zoo(south_africa)
south_africa %>%
ggplot(aes(x = year, y = life_expectancy)) +
geom_line()
south_africa <-
gm_life_expectancy %>%
dplyr::filter(country == "South Africa") %>%
pivot_longer(cols = !country, names_to = "year", values_to = "life_expectancy") %>%
select("year", "life_expectancy")
south_africa$year <- as.Date(south_africa$year, format="%Y")
south_africa %>%
ggplot(aes(x = year, y = life_expectancy)) +
geom_line()
south_africa %>%
ggplot(aes(year, life_expectancy)) +
geom_line() +
geom_vline(xintercept = 1918, color = "blue") +
geom_vline(xintercept = 1994, color = "blue")
southern_africa_countries %>%
ggplot(aes(year, life_expectancy, color = name)) +
geom_vline(xintercept = 1994, color = "blue") +
geom_line() +
geom_point() +
geom_text(
aes(label = name),
data = southern_africa_countries %>% dplyr::filter(year == 2015),
color = "black",
hjust = 0,
size = 3,
nudge_x = 0.5
) +
guides(color = "none") +
coord_cartesian(xlim = c(1980, 2020))
southern_africa_countries <-
gm_life_expectancy %>%
dplyr::filter(name %in% c("South Africa", "Swaziland" ,"Lesotho", "Botswana")) %>%
dplyr::filter(year >= 1980, year <= 2015)
southern_africa_countries <-
gm_life_expectancy %>%
dplyr::filter(country %in% c("South Africa", "Swaziland" ,"Lesotho", "Botswana")) %>%
dplyr::filter(year >= 1980, year <= 2015)
southern_africa_countries <-
gm_life_expectancy %>%
dplyr::filter(country %in% c("South Africa", "Swaziland" ,"Lesotho", "Botswana")) %>%
dplyr::mutate(year = as.Date(year, format="%Y")) %>%
dplyr::filter(year >= 1980, year <= 2015)
southern_africa_countries <-
gm_life_expectancy %>%
dplyr::filter(country %in% c("South Africa", "Swaziland" ,"Lesotho", "Botswana")) %>%
dplyr::mutate(year = as.Date(year, format="%Y")) %>%
dplyr::filter(year >= 1980, year <= 2015)
southern_africa_countries <-
gm_life_expectancy %>%
dplyr::filter(country %in% c("South Africa", "Swaziland" ,"Lesotho", "Botswana")) %>%
dplyr::mutate(year = as.Date("year", format="%Y")) %>%
dplyr::filter(year >= 1980, year <= 2015)
southern_africa_countries %>%
ggplot(aes(year, life_expectancy, color = name)) +
geom_vline(xintercept = 1994, color = "blue") +
geom_line() +
geom_point() +
geom_text(
aes(label = name),
data = southern_africa_countries %>% dplyr::filter(year == 2015),
color = "black",
hjust = 0,
size = 3,
nudge_x = 0.5
) +
guides(color = "none") +
coord_cartesian(xlim = c(1980, 2020))
View(southern_africa_countries)
southern_africa_countries <-
gm_life_expectancy %>%
dplyr::filter(country %in% c("South Africa", "Swaziland" ,"Lesotho", "Botswana"))
View(southern_africa_countries)
southern_africa_countries <-
gm_life_expectancy %>%
dplyr::filter(country %in% c("South Africa", "Swaziland" ,"Lesotho", "Botswana")) %>%
pivot_longer(cols = !country, names_to = "year", values_to = "life_expectancy") %>%
select("year", "life_expectancy")
View(southern_africa_countries)
southern_africa_countries <-
gm_life_expectancy %>%
dplyr::filter(country %in% c("South Africa", "Swaziland" ,"Lesotho", "Botswana")) %>%
pivot_longer(cols = !country, names_to = "year", values_to = "life_expectancy") %>%
select("year", "life_expectancy") %>%
mutate(year = as.Date(year, format = "%Y"))
southern_africa_countries <-
gm_life_expectancy %>%
dplyr::filter(country %in% c("South Africa", "Swaziland" ,"Lesotho", "Botswana")) %>%
pivot_longer(cols = !country, names_to = "year", values_to = "life_expectancy") %>%
select("year", "life_expectancy") %>%
mutate(year = as.Date(year, format = "%Y")) %>%
dplyr::filter(year >= 1980, year <= 2015)
southern_africa_countries %>%
ggplot(aes(year, life_expectancy, color = name)) +
geom_vline(xintercept = 1994, color = "blue") +
geom_line() +
geom_point() +
geom_text(
aes(label = name),
data = southern_africa_countries %>% dplyr::filter(year == 2015),
color = "black",
hjust = 0,
size = 3,
nudge_x = 0.5
) +
guides(color = "none") +
coord_cartesian(xlim = c(1980, 2020))
southern_africa_countries %>%
ggplot(aes(year, life_expectancy, color = country)) +
geom_vline(xintercept = 1994, color = "blue") +
geom_line() +
geom_point() +
geom_text(
aes(label = country),
data = southern_africa_countries %>% dplyr::filter(year == 2015),
color = "black",
hjust = 0,
size = 3,
nudge_x = 0.5
) +
guides(color = "none") +
coord_cartesian(xlim = c(1980, 2020))
southern_africa_countries <-
gm_life_expectancy %>%
dplyr::filter(country %in% c("South Africa", "Swaziland" ,"Lesotho", "Botswana")) %>%
pivot_longer(cols = !country, names_to = "year", values_to = "life_expectancy") %>%
select("year", "life_expectancy") %>%
mutate(year = as.Date(year, format = "%Y")) %>%
dplyr::filter(year >= 1980, year <= 2015)
southern_africa_countries <-
gm_life_expectancy %>%
dplyr::filter(country %in% c("South Africa", "Swaziland" ,"Lesotho", "Botswana")) %>%
pivot_longer(cols = !country, names_to = "year", values_to = "life_expectancy") %>%
select("year", "life_expectancy") %>%
mutate(year = as.Date(year, format = "%Y"))
View(southern_africa_countries)
southern_africa_countries <-
gm_life_expectancy %>%
dplyr::filter(country %in% c("South Africa", "Swaziland" ,"Lesotho", "Botswana")) %>%
pivot_longer(cols = !country, names_to = "year", values_to = "life_expectancy") %>%
mutate(year = as.Date(year, format = "%Y"))
View(southern_africa_countries)
southern_africa_countries <-
gm_life_expectancy %>%
dplyr::filter(country %in% c("South Africa", "Swaziland" ,"Lesotho", "Botswana")) %>%
pivot_longer(cols = !country, names_to = "year", values_to = "life_expectancy") %>%
mutate(year = as.Date(year, format = "%Y")) %>%
dplyr::filter(year >= 1980, year <= 2015)
southern_africa_countries %>%
ggplot(aes(year, life_expectancy, color = country)) +
geom_vline(xintercept = 1994, color = "blue") +
geom_line() +
geom_point() +
geom_text(
aes(label = country),
data = southern_africa_countries %>% dplyr::filter(year == 2015),
color = "black",
hjust = 0,
size = 3,
nudge_x = 0.5
) +
guides(color = "none") +
coord_cartesian(xlim = c(1980, 2020))
southern_africa_countries <-
gm_life_expectancy %>%
dplyr::filter(country %in% c("South Africa", "Swaziland" ,"Lesotho", "Botswana")) %>%
pivot_longer(cols = !country, names_to = "year", values_to = "life_expectancy") %>%
mutate(year = as.Date(year, format = "%Y"))
southern_africa_countries %>%
ggplot(aes(year, life_expectancy, color = country)) +
geom_vline(xintercept = 1994, color = "blue") +
geom_line() +
geom_point() +
geom_text(
aes(label = country),
data = southern_africa_countries %>% dplyr::filter(year == 2015),
color = "black",
hjust = 0,
size = 3,
nudge_x = 0.5
) +
guides(color = "none") +
coord_cartesian(xlim = c(1980, 2020))
southern_africa_countries <-
gm_life_expectancy %>%
dplyr::filter(country %in% c("South Africa", "Swaziland" ,"Lesotho", "Botswana")) %>%
pivot_longer(cols = !country, names_to = "year", values_to = "life_expectancy") %>%
mutate(year = as.Date(year, format = "%Y-01-01"))
southern_africa_countries %>%
ggplot(aes(year, life_expectancy, color = country)) +
geom_vline(xintercept = 1994, color = "blue") +
geom_line() +
geom_point() +
geom_text(
aes(label = country),
data = southern_africa_countries %>% dplyr::filter(year == 2015),
color = "black",
hjust = 0,
size = 3,
nudge_x = 0.5
) +
guides(color = "none") +
coord_cartesian(xlim = c(1980, 2020))
southern_africa_countries <-
gm_life_expectancy %>%
dplyr::filter(country %in% c("South Africa", "Swaziland" ,"Lesotho", "Botswana")) %>%
pivot_longer(cols = !country, names_to = "year", values_to = "life_expectancy") %>%
mutate(year = as.numeric(year) %>%
dplyr::filter(year >= 1980, year <= 2015)
southern_africa_countries <-
southern_africa_countries <-
gm_life_expectancy %>%
dplyr::filter(country %in% c("South Africa", "Swaziland" ,"Lesotho", "Botswana")) %>%
pivot_longer(cols = !country, names_to = "year", values_to = "life_expectancy") %>%
mutate(year = as.numeric(year))
View(southern_africa_countries)
=======
pivot_longer(cols = !country, names_to = "year", values_to = "life_expectancy") %>%
select("year", "life_expectancy")
View(south_africa)
>>>>>>> f8503e353b1d763d39dbb4a71522824f6fad0e69
southern_africa_countries <-
gm_life_expectancy %>%
dplyr::filter(country %in% c("South Africa", "Swaziland" ,"Lesotho", "Botswana")) %>%
pivot_longer(cols = !country, names_to = "year", values_to = "life_expectancy") %>%
mutate(year = as.numeric(year)) %>%
dplyr::filter(year >= 1980 & year <= 2015)
southern_africa_countries %>%
ggplot(aes(year, life_expectancy, color = country)) +
geom_vline(xintercept = 1994, color = "blue") +
geom_line() +
geom_point() +
geom_text(
aes(label = country),
data = southern_africa_countries %>% dplyr::filter(year == 2015),
color = "black",
hjust = 0,
size = 3,
nudge_x = 0.5
) +
guides(color = "none") +
coord_cartesian(xlim = c(1980, 2020))
library(leaflet)
m <- leaflet() %>%
setView(-72.518978, 42.381050, zoom = 1) %>%
addTiles() %>%  # Load the default OpenStreetMap tile set (images that make up the map)
addMarkers(lng=-72.6403, lat=42.3163, popup="Smith!")
m
library(readr)
library(dplyr)
# One file contains information about the storm
stormdetails <- read_csv("StormEvents_details-ftp_v1.0_d1950_c20210803.csv")
stormdetails <- read_csv(stormdetails)
View(stormdetails)
# One file contains information about the storm
stormdetails <- read_csv("too-git-for-git/StormEvents_details-ftp_v1.0_d2023_c20240917.csv")
# One file contains information about the storm
stormdetails <- read_csv("too-big-for-git/StormEvents_details-ftp_v1.0_d2023_c20240917.csv")
# The other contains actual location data
stormlocs <- read_csv("too-big-for-git/StormEvents_locations-ftp_v1.0_d2023_c20240917.csv")
# We'll want to use them together, so we'll use a join
storms <- stormlocs %>%
left_join(stormdetails, by="EVENT_ID")
glimpse(storms)
lightning_map
lightning_map <- storms %>%               # Start with the storm data
filter(EVENT_TYPE == "Lightning") %>%   # Filter down to just the lightning events
leaflet() %>%                           # Pipe into a leaflet map
addMarkers(~LONGITUDE, ~LATITUDE, popup = "Zap!") %>%   # Add markers at each LONGITUDE/LATITUDE pair
addProviderTiles("Stamen.Toner")
lightning_map
mtw_map <- storms %>%
filter(EVENT_TYPE == "Marine Thunderstorm Wind") %>%
leaflet() %>%
addProviderTiles("Stamen.Toner") %>%
addMarkers(~LONGITUDE, ~LATITUDE, popup = ~EVENT_NARRATIVE)
mtw_map
tornados <- storms %>%
filter(EVENT_TYPE=="Tornado") %>%
mutate(DAMAGE_PROPERTY = as.numeric(sub("K", "", DAMAGE_PROPERTY, fixed = TRUE)))
m <- leaflet(data = tornados) %>%
addProviderTiles("Stamen.Toner") %>%
addCircles(~LONGITUDE, ~LATITUDE,
weight = 1,
radius = ~DAMAGE_PROPERTY*100, # Map the radius of the circle to amount of damage
popup = ~EVENT_NARRATIVE)      # Include details about the tornado
m
install.packages("maptools")
m <- leaflet() %>%
setView(-72.518978, 42.381050, zoom = 1) %>%
addTiles() %>%  # Load the default OpenStreetMap tile set (images that make up the map)
addMarkers(lng=-72.6403, lat=42.3163, popup="Smith!")
m
m <- leaflet() %>%
setView(-72.518978, 42.381050, zoom = 1) %>%
addTiles() %>%  # Load the default OpenStreetMap tile set (images that make up the map)
addMarkers(lng=-72.6403, lat=42.3163) %>%
addPopups(lng=-72.6403, lat=42.3163, content = "Smith!")
m <- leaflet() %>%
setView(-72.518978, 42.381050, zoom = 1) %>%
addTiles() %>%  # Load the default OpenStreetMap tile set (images that make up the map)
addMarkers(lng=-72.6403, lat=42.3163, popup = "Smith!")
m
library(htmltools)
m <- leaflet() %>%
setView(-72.518978, 42.381050, zoom = 1) %>%
addTiles() %>%  # Load the default OpenStreetMap tile set (images that make up the map)
addMarkers(lng=-72.6403, lat=42.3163, popup = ~htmlEscape("Smith!"))
library(htmltools)
m <- leaflet() %>%
setView(-72.518978, 42.381050, zoom = 1) %>%
addTiles() %>%  # Load the default OpenStreetMap tile set (images that make up the map)
addMarkers(lng=-72.6403, lat=42.3163, popup = htmlEscape("Smith!"))
m
library(readr)
library(dplyr)
# One file contains information about the storm
stormdetails <- read_csv("too-big-for-git/StormEvents_details-ftp_v1.0_d2023_c20240917.csv")
# The other contains actual location data
stormlocs <- read_csv("too-big-for-git/StormEvents_locations-ftp_v1.0_d2023_c20240917.csv")
# We'll want to use them together, so we'll use a join
storms <- stormlocs %>%
left_join(stormdetails, by="EVENT_ID")
# One file contains information about the storm
stormdetails <- read_csv("too-big-for-git/StormEvents_details-ftp_v1.0_d2023_c20240917.csv")
problems()
spec()
# The other contains actual location data
stormlocs <- read_csv("too-big-for-git/StormEvents_locations-ftp_v1.0_d2023_c20240917.csv")
# One file contains information about the storm
stormdetails <- read_csv("too-big-for-git/StormEvents_details-ftp_v1.0_d2023_c20240917.csv")
problems()
problems(stormdetails)
glimpse(storms)
storms <- stormlocs %>%
left_join(stormdetails, by="EVENT_ID")
lightning_map <- storms %>%               # Start with the storm data
filter(EVENT_TYPE == "Lightning") %>%   # Filter down to just the lightning events
leaflet() %>%                           # Pipe into a leaflet map
addMarkers(~LONGITUDE, ~LATITUDE, popup = "Zap!") %>%   # Add markers at each LONGITUDE/LATITUDE pair
addProviderTiles("Stamen.Toner")
lightning_map
mtw_map <- storms %>%
filter(EVENT_TYPE == "Marine Thunderstorm Wind") %>%
leaflet() %>%
addProviderTiles("Stamen.Toner") %>%
addMarkers(~LONGITUDE, ~LATITUDE, popup = ~EVENT_NARRATIVE)
mtw_map
tornados <- storms %>%
filter(EVENT_TYPE=="Tornado") %>%
mutate(DAMAGE_PROPERTY = as.numeric(sub("K", "", DAMAGE_PROPERTY, fixed = TRUE)))
m <- leaflet(data = tornados) %>%
addProviderTiles("Stamen.Toner") %>%
addCircles(~LONGITUDE, ~LATITUDE,
weight = 1,
radius = ~DAMAGE_PROPERTY*100, # Map the radius of the circle to amount of damage
popup = ~EVENT_NARRATIVE)      # Include details about the tornado
m
install.packages("sf")
library(sf)
# Remember when we talked about map projections?
crswgs84 = CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")
# Now we can load the shapefile using the correct projection
states = readShapePoly("cb_2015_us_state_500k/cb_2015_us_state_500k.shp",
proj4string = crswgs84,
verbose = TRUE)
my_sf <- read_sf("too-big-for-git/cb_2018_us_state_500k/cb_2018_us_state_500k.shp")
print(my_sf)
nrow(my_sf)
View(my_sf)
ggplot(my_sf) +
geom_sf(fill = "#69b3a2", color = "white") +
theme_void()
library(ggplot2)
ggplot(my_sf) +
geom_sf(fill = "#69b3a2", color = "white") +
theme_void()
library(htmltools)
m <- leaflet() %>%
setView(-72.518978, 42.381050, zoom = 17) %>%
addTiles() %>%  # Load the default OpenStreetMap tile set
addMarkers(lng=-72.6403, lat=42.3163, popup = htmlEscape("Smith!"))
m
m <- leaflet() %>%
setView(-72.518978, 42.381050, zoom = 10) %>%
addTiles() %>%  # Load the default OpenStreetMap tile set
addMarkers(lng=-72.6403, lat=42.3163, popup = "Smith!")
m
# One file contains information about the storm
# ignore the warning
stormdetails <- read_csv("too-big-for-git/StormEvents_details-ftp_v1.0_d2023_c20240917.csv")
problems()
dat <- problems()
View(dat)
# One file contains information about the storm
# ignore the warning
stormdetails <- read_csv("too-big-for-git/StormEvents_details-ftp_v1.0_d2023_c20240917.csv")
dat <- problems()
View(dat)
# One file contains information about the storm
# ignore the warning
stormdetails <- read_csv("too-big-for-git/StormEvents_details-ftp_v1.0_d2023_c20240917.csv")
# The other contains actual location data
stormlocs <- read_csv("too-big-for-git/StormEvents_locations-ftp_v1.0_d2023_c20240917.csv")
# We'll want to use them together, so we'll use a join
storms <- stormlocs %>%
left_join(stormdetails, by="EVENT_ID")
lightning_map <- storms %>%               # Start with the storm data
filter(EVENT_TYPE == "Lightning") %>%   # Filter down to just the lightning events
leaflet() %>%                           # Pipe into a leaflet map
addMarkers(~LONGITUDE, ~LATITUDE, popup = "Zap!") %>%   # Add markers at each LONGITUDE/LATITUDE pair
addProviderTiles("Stamen.Toner")        # We'll use black/white tiles for dramatic effect
lightning_map
lightning_map <- storms %>%               # Start with the storm data
filter(EVENT_TYPE == "Lightning") %>%   # Filter down to just the lightning events
leaflet() %>%                           # Pipe into a leaflet map
addMarkers(~LONGITUDE, ~LATITUDE, popup = "Zap!") %>%   # Add markers at each LONGITUDE/LATITUDE pair
addProviderTiles("Standia.StamenToner")  # We'll use black/white tiles for dramatic effect
lightning_map
lightning_map <- storms %>%               # Start with the storm data
filter(EVENT_TYPE == "Lightning") %>%   # Filter down to just the lightning events
leaflet() %>%                           # Pipe into a leaflet map
addProviderTiles("Standia.StamenToner") %>% # We'll use black/white tiles for dramatic effect
addMarkers(~LONGITUDE, ~LATITUDE, popup = "Zap!")
lightning_map
lightning_map <- storms %>%               # Start with the storm data
filter(EVENT_TYPE == "Lightning") %>%   # Filter down to just the lightning events
leaflet() %>%                           # Pipe into a leaflet map
#addProviderTiles("Standia.StamenToner") %>% # We'll use black/white tiles for dramatic effect
addMarkers(~LONGITUDE, ~LATITUDE, popup = "Zap!")
lightning_map
lightning_map <- storms %>%               # Start with the storm data
filter(EVENT_TYPE == "Lightning") %>%   # Filter down to just the lightning events
leaflet() %>%
addTiles() %>%
#addProviderTiles("Standia.StamenToner") %>% # We'll use black/white tiles for dramatic effect
addMarkers(~LONGITUDE, ~LATITUDE, popup = "Zap!")
lightning_map
mtw_map <- storms %>%
filter(EVENT_TYPE == "Marine Thunderstorm Wind") %>%
leaflet() %>%
addTiles() %>%
addMarkers(~LONGITUDE, ~LATITUDE, popup = ~EVENT_NARRATIVE)
mtw_map
tornados <- storms %>%
filter(EVENT_TYPE=="Tornado") %>%
mutate(DAMAGE_PROPERTY = as.numeric(sub("K", "", DAMAGE_PROPERTY, fixed = TRUE)))
m <- leaflet(data = tornados) %>%
addTiles() %>%
addCircles(~LONGITUDE, ~LATITUDE,
weight = 1,
radius = ~DAMAGE_PROPERTY*100, # Map the radius of the circle to amount of damage
popup = ~EVENT_NARRATIVE)      # Include details about the tornado
m
newEngland <- my_sf[my_sf$STUSPS == "ME" | my_sf$STUSPS == "NH" | my_sf$STUSPS == "VT" |
my_sf$STUSPS == "MA" | my_sf$STUSPS == "RI" | my_sf$STUSPS == "CT"]
newEngland <- my_sf[(my_sf$STUSPS == "ME" | my_sf$STUSPS == "NH" | my_sf$STUSPS == "VT" |
my_sf$STUSPS == "MA" | my_sf$STUSPS == "RI" | my_sf$STUSPS == "CT")]
newEngland <- my_sf[my_sf$STUSPS == "ME"]
newEngland <- my_sf[(my_sf$STUSPS == "ME" | my_sf$STUSPS == "NH" | my_sf$STUSPS == "VT" |
my_sf$STUSPS == "MA" | my_sf$STUSPS == "RI" | my_sf$STUSPS == "CT"), ]
plot(st_geometry(newEngland),
xlim = c(-20, 60), ylim = c(-40, 35),
col = "steelblue", lwd = 0.5
)
plot(st_geometry(newEngland),
# xlim = c(-20, 60), ylim = c(-40, 35),
col = "steelblue", lwd = 0.5
)
